---
image: gitlab-registry.oit.duke.edu/devil-ops/goreleaser:v0.7.1
default:
  retry:
    max: 2
    when: runner_system_failure
  tags:
    - oit-shared-unprivileged
variables:
  GOCACHE: /tmp/
  GOPATH: /tmp/
  GOLANGCI_LINT_CACHE: /tmp/
stages:
  - test
  - release
  - deploy
test-docs:
  image: image-mirror-prod-registry.cloud.duke.edu/squidfunk/mkdocs-material:9
  stage: test
  script:
  - mkdocs build --strict --verbose --site-dir test
  artifacts:
    paths:
    - test
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
pages:
  stage: deploy
  image: image-mirror-prod-registry.cloud.duke.edu/squidfunk/mkdocs-material:9
  script:
  - mkdocs build --strict --verbose
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
lint:
  stage: test
  script:
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
## Coverage will do visual coverage in the GitLab UI
coverage:
  stage: test
  coverage: '/total:.*\d+.\d+/'
  script:
    - go mod tidy
    - go test ./... -coverprofile=coverage-all.txt -covermode count
    ## EasyJson package is auto generated, no tests needed here in theory
    - grep -v _easyjson.go coverage-all.txt > coverage.txt
    - gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -func coverage.txt
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
## check-releaser looks at some settings inside of the .goreleaser.yaml file and
## ensures that all the requirements are set correctly
check-release:
  stage: test
  variables:
    GIT_DEPTH: 0
  script:
    - /scripts/packaging-validation.sh
    - eval $(/scripts/vault-env.sh ssi-systems-${CI_PROJECT_NAME}-packaging)
    - goreleaser check
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
release:
  stage: release
  # Use oit-shared instead of the unprived runner as this eats up a lot of resources
  tags:
      - oit-shared
  rules:
    - if: '$CI_COMMIT_TAG =~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  variables:
    GIT_DEPTH: 0
  script:
    - eval $(/scripts/vault-env.sh ssi-systems-${CI_PROJECT_NAME}-packaging)
    - goreleaser release --clean
## security looks for common security issues
security:
  stage: test
  allow_failure: true
  script:
    - govulncheck ./...
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
## These take too long...what would be better?
.go-benchmarks:
  stage: test
  tags:
    - suitcase-benchmark
  only:
    - merge_requests
  variables:
    BENCHMARK_DATA_DIR: "/benchmark_data/"
  script:
    - go install golang.org/x/perf/cmd/benchstat@latest
    - go mod tidy
    - mkdir reports/
    - go test -run=^$ -benchmem -bench=. $(go list ./...) | tee reports/my-commit.txt
    - git fetch origin main
    - git checkout main
    - go test -run=^$ -benchmem -bench=. $(go list ./...) | tee reports/main.txt
    - benchstat ./reports/main.txt ./reports/my-commit.txt | tee ./reports/benchstat.txt
  artifacts:
    expire_in: 1 week
    expose_as: 'benchmark reports'
    paths: ['reports/']
