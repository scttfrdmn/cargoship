---
stages:
  - test
  - release
lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
## This will handle the coverage badge
unit-test:
  stage: test
  image: golang:1.18
  coverage: '/coverage: \d+.\d+% of statements/'
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  script:
    - go test -cover ./...
## Coverage will do visual coverage in the GitLab UI
coverage:
  stage: test
  image: golang:1.18
  script:
    - go mod tidy
    - go test ./... -coverprofile=coverage.txt -covermode count
    - go get github.com/boumenot/gocover-cobertura
    - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
  rules:
    - if: '$CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
release:
  stage: release
  image:
    name: gitlab-registry.oit.duke.edu/devil-ops/goreleaser:v0-1-6
    entrypoint: ['']
  rules:
    - if: '$CI_COMMIT_TAG =~ /v[0-9]+\.[0-9]+\.[0-9]+/ '
  variables:
    GIT_DEPTH: 0
  script:
    - eval $(/scripts/vault-env.sh ssi-systems-${CI_PROJECT_NAME}-packaging)
    - goreleaser check
    - goreleaser release --rm-dist
  retry:
    max: 2
    when: runner_system_failure
