//nolint
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package inventory

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "suitcase_index":
			out.SuitcaseIndex = int(in.Int())
		case "suitcase_name":
			out.SuitcaseName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	if in.SuitcaseIndex != 0 {
		const prefix string = ",\"suitcase_index\":"
		out.RawString(prefix)
		out.Int(int(in.SuitcaseIndex))
	}
	if in.SuitcaseName != "" {
		const prefix string = ",\"suitcase_name\":"
		out.RawString(prefix)
		out.String(string(in.SuitcaseName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory(l, v)
}
func easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory1(in *jlexer.Lexer, out *IndexSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = uint(in.Uint())
		case "Size":
			out.Size = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory1(out *jwriter.Writer, in IndexSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Count))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory1(l, v)
}
func easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory2(in *jlexer.Lexer, out *FileBucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Free":
			out.Free = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory2(out *jwriter.Writer, in FileBucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Free\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Free))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileBucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileBucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileBucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileBucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory2(l, v)
}
func easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory3(in *jlexer.Lexer, out *DirectoryInventoryOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "prefix":
			out.Prefix = string(in.String())
		case "top_level_directories":
			if in.IsNull() {
				in.Skip()
				out.TopLevelDirectories = nil
			} else {
				in.Delim('[')
				if out.TopLevelDirectories == nil {
					if !in.IsDelim(']') {
						out.TopLevelDirectories = make([]string, 0, 4)
					} else {
						out.TopLevelDirectories = []string{}
					}
				} else {
					out.TopLevelDirectories = (out.TopLevelDirectories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.TopLevelDirectories = append(out.TopLevelDirectories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "size_considered_large":
			out.SizeConsideredLarge = int64(in.Int64())
		case "max_suitcase_size":
			out.MaxSuitcaseSize = int64(in.Int64())
		case "internal_metadata_glob":
			out.InternalMetadataGlob = string(in.String())
		case "external_metadata_files":
			if in.IsNull() {
				in.Skip()
				out.ExternalMetadataFiles = nil
			} else {
				in.Delim('[')
				if out.ExternalMetadataFiles == nil {
					if !in.IsDelim(']') {
						out.ExternalMetadataFiles = make([]string, 0, 4)
					} else {
						out.ExternalMetadataFiles = []string{}
					}
				} else {
					out.ExternalMetadataFiles = (out.ExternalMetadataFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ExternalMetadataFiles = append(out.ExternalMetadataFiles, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "encrypt_inner":
			out.EncryptInner = bool(in.Bool())
		case "hash_inner":
			out.HashInner = bool(in.Bool())
		case "limit_file_count":
			out.LimitFileCount = int(in.Int())
		case "suitcase_format":
			out.SuitcaseFormat = string(in.String())
		case "inventory_format":
			out.InventoryFormat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory3(out *jwriter.Writer, in DirectoryInventoryOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"prefix\":"
		out.RawString(prefix)
		out.String(string(in.Prefix))
	}
	{
		const prefix string = ",\"top_level_directories\":"
		out.RawString(prefix)
		if in.TopLevelDirectories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.TopLevelDirectories {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"size_considered_large\":"
		out.RawString(prefix)
		out.Int64(int64(in.SizeConsideredLarge))
	}
	{
		const prefix string = ",\"max_suitcase_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxSuitcaseSize))
	}
	if in.InternalMetadataGlob != "" {
		const prefix string = ",\"internal_metadata_glob\":"
		out.RawString(prefix)
		out.String(string(in.InternalMetadataGlob))
	}
	if len(in.ExternalMetadataFiles) != 0 {
		const prefix string = ",\"external_metadata_files\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.ExternalMetadataFiles {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"encrypt_inner\":"
		out.RawString(prefix)
		out.Bool(bool(in.EncryptInner))
	}
	{
		const prefix string = ",\"hash_inner\":"
		out.RawString(prefix)
		out.Bool(bool(in.HashInner))
	}
	{
		const prefix string = ",\"limit_file_count\":"
		out.RawString(prefix)
		out.Int(int(in.LimitFileCount))
	}
	{
		const prefix string = ",\"suitcase_format\":"
		out.RawString(prefix)
		out.String(string(in.SuitcaseFormat))
	}
	{
		const prefix string = ",\"inventory_format\":"
		out.RawString(prefix)
		out.String(string(in.InventoryFormat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DirectoryInventoryOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DirectoryInventoryOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DirectoryInventoryOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DirectoryInventoryOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory3(l, v)
}
func easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory4(in *jlexer.Lexer, out *DirectoryInventory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]*File, 0, 8)
					} else {
						out.Files = []*File{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *File
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(File)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Files = append(out.Files, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				if out.Options == nil {
					out.Options = new(DirectoryInventoryOptions)
				}
				(*out.Options).UnmarshalEasyJSON(in)
			}
		case "total_indexes":
			out.TotalIndexes = int(in.Int())
		case "index_summaries":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.IndexSummaries = make(map[int]*IndexSummary)
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v8 *IndexSummary
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(IndexSummary)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					(out.IndexSummaries)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "internal_metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.InternalMetadata = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.InternalMetadata)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "external_metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExternalMetadata = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 string
					v10 = string(in.String())
					(out.ExternalMetadata)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory4(out *jwriter.Writer, in DirectoryInventory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix[1:])
		if in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Files {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		if in.Options == nil {
			out.RawString("null")
		} else {
			(*in.Options).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"total_indexes\":"
		out.RawString(prefix)
		out.Int(int(in.TotalIndexes))
	}
	{
		const prefix string = ",\"index_summaries\":"
		out.RawString(prefix)
		if in.IndexSummaries == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.IndexSummaries {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					(*v13Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"internal_metadata\":"
		out.RawString(prefix)
		if in.InternalMetadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.InternalMetadata {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				out.String(string(v14Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"external_metadata\":"
		out.RawString(prefix)
		if in.ExternalMetadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.ExternalMetadata {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.String(string(v15Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DirectoryInventory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DirectoryInventory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6f8bf452EncodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DirectoryInventory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DirectoryInventory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6f8bf452DecodeGitlabOitDukeEduDevilOpsDataSuitcasePkgInventory4(l, v)
}
